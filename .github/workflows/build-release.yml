name: Build Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Dump env
        run: env | sort
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Create artifacts directory
        run: mkdir artifacts
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: ${{ github.event.release.tag_name }}
          draft: true
      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url
      - name: Save version number to artifact
        run: echo "${{ github.event.release.tag_name }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts
  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [macos, linux]
        include:
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: linux
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
    steps:
      - name: Install Tasks
        uses: Arduino/actions/setup-taskfile@master
        with:
          version: "3"

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install linux depedencies
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        run: |
          cargo install cross

      - name: Build release binary
        run: task prod-release TARGET=${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/brrrr"

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Prepare for Upload
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
          echo "release upload url: $RELEASE_UPLOAD_URL"

          release_version="$(cat artifacts/release-version)"
          echo "::set-env name=RELEASE_VERSION::$release_version"
          echo "release version: $RELEASE_VERSION"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: "target/${{ matrix.target }}/release/brrrr"
          asset_name: "brrrr-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          asset_content_type: application/octet-stream
